
> ssot-3005@1.0.0 start
> node src/backend/server.js

🎯 Avvio Server SSOT Dinamico Evoluto - Fase 1 Frontend
============================================================
[AttributeSpace] AttributeSpace Evoluto inizializzato {
  enableBatching: true,
  batchDelay: 30,
  maxLoopDetection: 5,
  enableLogging: true
}
🌱 AttributeDiscoveryManager inizializzato - Schema Organico
🔗 ImplicitRelationManager inizializzato - Relazioni Organiche
🤖 SoftValidationEngine inizializzato - Validazione Intelligente
🔗 RelationEngine inizializzato
🚀 EntityEngine Evoluto inizializzato
🎯 ModuleRelationService inizializzato
📄 DocumentService inizializzato per SSOT-4000
🔗🔗🔗 SETTING UP ATTRIBUTESPACE NOTIFICATIONS
[AttributeSpace] Nuova sottoscrizione registrata: sub_1 {
  type: 'entity',
  entityType: '*',
  entityId: '*',
  attributeName: '*',
  attributeNamePattern: undefined,
  attributeType: undefined,
  changeType: '*',
  relationType: '*',
  sourceEntityType: undefined,
  targetEntityType: undefined,
  custom: undefined
}
[AttributeSpace] Nuova sottoscrizione registrata: sub_2 {
  type: 'relation',
  entityType: '*',
  entityId: '*',
  attributeName: '*',
  attributeNamePattern: undefined,
  attributeType: undefined,
  changeType: '*',
  relationType: '*',
  sourceEntityType: undefined,
  targetEntityType: undefined,
  custom: undefined
}
[AttributeSpace] Nuova sottoscrizione registrata: sub_3 {
  type: 'schema',
  entityType: '*',
  entityId: '*',
  attributeName: '*',
  attributeNamePattern: undefined,
  attributeType: undefined,
  changeType: '*',
  relationType: '*',
  sourceEntityType: undefined,
  targetEntityType: undefined,
  custom: undefined
}
[AttributeSpace] Nuova sottoscrizione registrata: sub_4 {
  type: 'entity',
  entityType: '*',
  entityId: '*',
  attributeName: '*',
  attributeNamePattern: '*password*',
  attributeType: undefined,
  changeType: '*',
  relationType: '*',
  sourceEntityType: undefined,
  targetEntityType: undefined,
  custom: undefined
}
[AttributeSpace] Nuova sottoscrizione registrata: sub_5 {
  type: 'entity',
  entityType: '*',
  entityId: '*',
  attributeName: '*',
  attributeNamePattern: undefined,
  attributeType: undefined,
  changeType: '*',
  relationType: '*',
  sourceEntityType: undefined,
  targetEntityType: undefined,
  custom: [Function: custom]
}
✅ AttributeSpace Evoluto configurato con 5 sottoscrizioni pattern-based
🔌 Connessione a Neo4j...
Connessione a Neo4j in corso...
✅ Connessione a Neo4j stabilita con successo (Pool: 10 connections)
🚀 Inizializzazione componenti evoluti...
🔄 Inizializzazione SchemaManager evoluto...
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType)
            RETURN s.entityType as entityType
            ORDER BY s.entityType
        
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: ' Giannino',
  version: 1,
  mode: 'flexible',
  created: 1749507773348,
  modified: '2025-06-09T22:22:53.349Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: eta',
      name: 'eta',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'integer',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: attivo',
      name: 'attivo',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'boolean',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: sito_web',
      name: 'sito_web',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: telefono',
      name: 'telefono',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: email',
      name: 'email',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'email',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'CompositeDocument',
  version: 1,
  mode: 'strict',
  created: 1749909968946,
  modified: '2025-06-14T14:06:08.947Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Stato del documento',
      name: 'status',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'select',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Metadati aggiuntivi del documento',
      name: 'metadata',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'json',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Layout e configurazione dei moduli nel documento',
      name: 'layout',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'json',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'ID del proprietario del documento',
      name: 'ownerId',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: true,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Descrizione del documento',
      name: 'description',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'text',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Nome del documento composito',
      name: 'name',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: true,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Progetto di appartenenza del documento',
      name: 'projectId',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'reference',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'Contact',
  version: 1,
  mode: 'flexible',
  created: 1749949111009,
  modified: '2025-06-15T00:58:31.009Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Contact name',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: true,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Phone number',
      name: 'telefono',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Email address',
      name: 'email',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'email',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'FilmProject',
  version: 1,
  mode: 'flexible',
  created: 1749507549685,
  modified: '2025-06-09T22:19:09.685Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: budget',
      name: 'budget',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'integer',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: anno',
      name: 'anno',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'integer',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: regista',
      name: 'regista',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'ModuleInstance',
  version: 1,
  mode: 'flexible',
  created: 1749507550328,
  modified: '2025-06-09T22:19:10.328Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: version',
      name: 'version',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'integer',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: description',
      name: 'description',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: targetEntityId',
      name: 'targetEntityId',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: targetEntityType',
      name: 'targetEntityType',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: templateModuleId',
      name: 'templateModuleId',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: instanceName',
      name: 'instanceName',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'Persona',
  version: 1,
  mode: 'flexible',
  created: 1749974649579,
  modified: '2025-06-15T08:04:09.580Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: email',
      name: 'email',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'email',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'Project',
  version: 1,
  mode: 'strict',
  created: 1749909968557,
  modified: '2025-06-14T14:06:08.558Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Budget del progetto',
      name: 'budget',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'number',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Data di fine del progetto',
      name: 'endDate',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'date',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Data di inizio del progetto',
      name: 'startDate',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'date',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Nome del progetto',
      name: 'name',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: true,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Stato del progetto',
      name: 'status',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'select',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Descrizione del progetto',
      name: 'description',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'text',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'TestDiscovery',
  version: 1,
  mode: 'flexible',
  created: 1749507550668,
  modified: '2025-06-09T22:19:10.668Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: attivo',
      name: 'attivo',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'boolean',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: telefono',
      name: 'telefono',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: email',
      name: 'email',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'email',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'TestEvoluzione',
  version: 1,
  mode: 'flexible',
  created: 1749538026273,
  modified: '2025-06-10T06:47:06.273Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaEntityType {entityType: $entityType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s, 
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description,
                       referencesEntityType: a.referencesEntityType,
                       relationTypeForReference: a.relationTypeForReference,
                       displayAttributeFromReferencedEntity: a.displayAttributeFromReferencedEntity,
                       cardinalityForReference: a.cardinalityForReference
                   } END) as attributes
        
✅ Schema entità caricato: {
  entityType: 'TestOrganico',
  version: 1,
  mode: 'flexible',
  created: 1749661496032,
  modified: '2025-06-11T17:04:56.032Z',
  constraints: [],
  attributes: [
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: attivo',
      name: 'attivo',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'boolean',
      required: false,
      validationRules: null
    },
    {
      referencesEntityType: null,
      displayAttributeFromReferencedEntity: null,
      description: 'Auto-discovered attribute: nome',
      name: 'nome',
      relationTypeForReference: null,
      cardinalityForReference: null,
      defaultValue: null,
      type: 'string',
      required: false,
      validationRules: null
    }
  ]
}
✅ Trovati 10 schemi entità
✅ Schema entità caricato:  Giannino
✅ Schema entità caricato: CompositeDocument
✅ Schema entità caricato: Contact
✅ Schema entità caricato: FilmProject
✅ Schema entità caricato: ModuleInstance
✅ Schema entità caricato: Persona
✅ Schema entità caricato: Project
✅ Schema entità caricato: TestDiscovery
✅ Schema entità caricato: TestEvoluzione
✅ Schema entità caricato: TestOrganico
🔍 Esecuzione query: 
            MATCH (s:SchemaRelationType)
            RETURN s.relationType as relationType
            ORDER BY s.relationType
        
🔍 Esecuzione query: 
            MATCH (s:SchemaRelationType {relationType: $relationType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s,
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description
                   } END) as attributes
        
✅ Schema relazione caricato: {
  relationType: 'CONTAINS_MODULE',
  version: 1,
  cardinality: '1:N',
  sourceTypes: [],
  targetTypes: [],
  created: 1749909969268,
  modified: '2025-06-14T14:06:09.269Z',
  constraints: [],
  attributes: [
    {
      description: 'Configurazione specifica per questo modulo nel documento',
      name: 'config',
      defaultValue: null,
      type: 'json',
      required: false,
      validationRules: null
    },
    {
      description: 'Stato di collasso del modulo',
      name: 'collapsed',
      defaultValue: null,
      type: 'boolean',
      required: false,
      validationRules: null
    },
    {
      description: 'Dimensione del modulo nel layout',
      name: 'size',
      defaultValue: null,
      type: 'json',
      required: false,
      validationRules: null
    },
    {
      description: 'Posizione del modulo nel layout',
      name: 'position',
      defaultValue: null,
      type: 'json',
      required: false,
      validationRules: null
    },
    {
      description: 'Ordine del modulo nel documento',
      name: 'order',
      defaultValue: null,
      type: 'number',
      required: true,
      validationRules: null
    }
  ]
}
🔍 Esecuzione query: 
            MATCH (s:SchemaRelationType {relationType: $relationType})
            OPTIONAL MATCH (s)-[:HAS_ATTRIBUTE]->(a:AttributeDefinition)
            RETURN s,
                   COLLECT(CASE WHEN a IS NOT NULL THEN {
                       name: a.name,
                       type: a.type,
                       required: a.required,
                       defaultValue: a.defaultValue,
                       validationRules: a.validationRules,
                       description: a.description
                   } END) as attributes
        
✅ Schema relazione caricato: {
  relationType: 'Knows',
  version: 1,
  cardinality: 'N:M',
  sourceTypes: [ 'Contact' ],
  targetTypes: [ 'Contact' ],
  created: 1749949111079,
  modified: '2025-06-15T00:58:31.079Z',
  constraints: [],
  attributes: [
    {
      description: 'Relationship strength (1-10)',
      name: 'strength',
      defaultValue: null,
      type: 'number',
      required: false,
      validationRules: null
    },
    {
      description: 'Since when they know each other',
      name: 'since',
      defaultValue: null,
      type: 'date',
      required: false,
      validationRules: null
    }
  ]
}
✅ Trovati 2 schemi relazione
✅ Schema relazione caricato: CONTAINS_MODULE
✅ Schema relazione caricato: Knows
✅ SchemaManager inizializzato con 10 schemi entità e 2 schemi relazione
✅ SchemaManager evoluto inizializzato
📋 Inizializzazione schemi base del sistema...
📋 Tutti gli schemi base inizializzati con successo
✅ Schemi base del sistema inizializzati
🔍 Esecuzione query: 
                MATCH (source:Entity)-[:HAS_RELATION]->(r:Relation)-[:TO_ENTITY]->(target:Entity)
                RETURN r, source, target
                ORDER BY r.created
            
✅ Caricate 2 relazioni dal database
✅ RelationEngine caricato con relazioni esistenti
🎯 Tutti i componenti evoluti inizializzati con successo
🚀 Server SSOT Dinamico Evoluto (Fase 4 - AttributeSpace) avviato su porta 3000
📱 Dashboard: http://localhost:3000/
🔌 WebSocket: ws://localhost:3000/
🧠 Componenti attivi: AttributeSpace Evoluto, EntityEngine Evoluto, RelationEngine, SchemaManager Evoluto
✅ Server pronto per frontend evoluto Fase 1
📋 Servizi disponibili:
   - API MVP compatibili per fallback
   - API evolute per SchemaService
   - File statici frontend da /frontend/
   - WebSocket per real-time updates
   - Template test page: http://localhost:3000/views/template-test.html
============================================================
2025-06-15T08:32:49.827Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:31:52.578Z',
  nome: 'FRESH SERVER TEST',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  email: 'alessio.hong@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'NOTIFICATION TEST',
  oldValue: 'FRESH SERVER TEST',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'NOTIFICATION TEST',
  changeType: 'update',
  clients: 0,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:32:49.874Z'
  }
}
2025-06-15T08:33:57.310Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:33:57.313Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:33:57.324Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
Nuovo client WebSocket connesso
2025-06-15T08:33:57.354Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:33:57.356Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:32:49.831Z',
  nome: 'NOTIFICATION TEST',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  email: 'alessio.hong@example.com'
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:33:57.373Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
2025-06-15T08:33:57.378Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
2025-06-15T08:34:00.144Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:34:00.146Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:34:00.151Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:34:00.194Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:34:00.195Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
2025-06-15T08:34:00.199Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:34:00.209Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 3000,
  averageAmount: 3000,
  minAmount: 3000,
  maxAmount: 3000,
  roles: []
}
2025-06-15T08:34:13.381Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  oldValue: 'NOTIFICATION TEST',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:34:13.443Z'
  }
}
2025-06-15T08:34:16.468Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:34:13.384Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  email: 'alessio.hong@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Hong',
  oldValue: 'Hong',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Hong',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:34:16.528Z'
  }
}
2025-06-15T08:34:28.396Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo email per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:34:16.478Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  email: 'alessio.hong@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`email` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo email aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'email',
  newValue: 'alessio.hong@example.net',
  oldValue: 'alessio.hong@example.com',
  entityType: 'Persona'
}
✅ Attributo email aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'email'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'email',
  newValue: 'alessio.hong@example.net',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'email',
    data: undefined,
    timestamp: '2025-06-15T08:34:28.491Z'
  }
}
2025-06-15T08:34:32.327Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo telefono per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:34:28.406Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`telefono` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo telefono aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'telefono',
  newValue: '3345050930',
  oldValue: undefined,
  entityType: 'Persona'
}
✅ Attributo telefono aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'telefono'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'telefono',
  newValue: '3345050930',
  changeType: 'create',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'create',
    attributeName: 'telefono',
    data: undefined,
    timestamp: '2025-06-15T08:34:32.420Z'
  }
}
2025-06-15T08:34:42.691Z - GET /.well-known/appspecific/com.chrome.devtools.json
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:35:26.693Z - PUT /api/modules/00482728-3590-4d2a-8dea-af949107e980/members/f00ea4f4-e519-4116-b985-cda83f35a2a0/attributes
🔍 Esecuzione query: 
                MATCH (e:Entity {id: $entityId})-[r:MEMBER_OF]->(m:ModuleInstance {id: $moduleId})
                SET r += $attributes, r.lastModified = $lastModified
                RETURN e, r, m
            
✅ Attributi relazione aggiornati per f00ea4f4-e519-4116-b985-cda83f35a2a0 in modulo 00482728-3590-4d2a-8dea-af949107e980
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:35:26.728Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:35:26.731Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: { type: 'relation', entityId: undefined, attributeName: undefined }
🔗 Notifica relazione propagata: { relationType: 'MEMBER_OF', changeType: 'updated', clients: 2 }
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
Client WebSocket disconnesso
2025-06-15T08:35:30.851Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:35:30.853Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:35:30.860Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:35:30.873Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:35:30.874Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
Nuovo client WebSocket connesso
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:34:32.336Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:35:30.883Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:35:30.890Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:35:58.887Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:36:07.787Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Bong',
  oldValue: 'Hong',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Bong',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:36:07.837Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:36:09.292Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:36:09.296Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:37:26.559Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:36:07.788Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'TEST CONSOLE LOG',
  oldValue: 'Alessio',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'TEST CONSOLE LOG',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:37:26.602Z'
  }
}
Client WebSocket disconnesso
2025-06-15T08:38:08.991Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:38:08.992Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:38:09.001Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:38:09.013Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:38:09.014Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:37:26.561Z',
  nome: 'TEST CONSOLE LOG',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
2025-06-15T08:38:09.024Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:38:09.030Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
Client WebSocket disconnesso
2025-06-15T08:38:13.478Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:38:13.479Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:38:13.484Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:38:13.494Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:38:13.495Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:38:13.502Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:38:13.507Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:38:14.970Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:38:18.135Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:38:40.187Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  oldValue: 'TEST CONSOLE LOG',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:38:40.244Z'
  }
}
2025-06-15T08:38:44.406Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:38:46.833Z - GET /.well-known/appspecific/com.chrome.devtools.json
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:39:09.530Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:39:09.531Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:41:40.561Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:38:40.188Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'BROADCAST TEST FIX',
  oldValue: 'Alessio',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'BROADCAST TEST FIX',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:41:40.605Z'
  }
}
Client WebSocket disconnesso
2025-06-15T08:43:05.719Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:43:05.720Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:43:05.726Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:43:05.740Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
Nuovo client WebSocket connesso
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:43:05.745Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:43:05.748Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:41:40.564Z',
  nome: 'BROADCAST TEST FIX',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:43:05.753Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
Client WebSocket disconnesso
2025-06-15T08:43:09.093Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:43:09.094Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:43:09.103Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:43:09.114Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:43:09.116Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:43:09.121Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
2025-06-15T08:43:09.127Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4000,
  averageAmount: 4000,
  minAmount: 4000,
  maxAmount: 4000,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:43:17.189Z - PUT /api/modules/00482728-3590-4d2a-8dea-af949107e980/members/f00ea4f4-e519-4116-b985-cda83f35a2a0/attributes
🔍 Esecuzione query: 
                MATCH (e:Entity {id: $entityId})-[r:MEMBER_OF]->(m:ModuleInstance {id: $moduleId})
                SET r += $attributes, r.lastModified = $lastModified
                RETURN e, r, m
            
✅ Attributi relazione aggiornati per f00ea4f4-e519-4116-b985-cda83f35a2a0 in modulo 00482728-3590-4d2a-8dea-af949107e980
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:43:17.218Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:43:17.220Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: { type: 'relation', entityId: undefined, attributeName: undefined }
🔗 Notifica relazione propagata: { relationType: 'MEMBER_OF', changeType: 'updated', clients: 2 }
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:43:30.230Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  oldValue: 'BROADCAST TEST FIX',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Alessio',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:43:30.282Z'
  }
}
2025-06-15T08:43:32.323Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:43:30.232Z',
  nome: 'Alessio',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
2025-06-15T08:43:41.451Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:43:43.479Z - GET /.well-known/appspecific/com.chrome.devtools.json
Client WebSocket disconnesso
2025-06-15T08:43:48.330Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:43:48.331Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:43:48.335Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:43:48.349Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:43:48.350Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:43:48.358Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:43:48.365Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:43:51.242Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:43:58.921Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  oldValue: 'Alessio',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:43:58.969Z'
  }
}
2025-06-15T08:44:06.743Z - GET /.well-known/appspecific/com.chrome.devtools.json
Client WebSocket disconnesso
2025-06-15T08:44:09.355Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:44:09.390Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:44:09.391Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:09.397Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:44:09.415Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:44:09.417Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:43:58.922Z',
  nome: 'Luigi',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:09.422Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:09.427Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
Client WebSocket disconnesso
2025-06-15T08:44:21.167Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:44:21.193Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:44:21.194Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:21.199Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:44:21.220Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:44:21.221Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:21.228Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:21.232Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
Client WebSocket disconnesso
2025-06-15T08:44:25.471Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:44:25.472Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:44:25.477Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:44:25.492Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:44:25.493Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:25.498Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:44:25.502Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:44:36.010Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Gianni',
  oldValue: 'Luigi',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Gianni',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:44:36.061Z'
  }
}
2025-06-15T08:44:38.767Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:49:14.566Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:49:14.566Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:49:14.571Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:49:14.614Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:49:14.615Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:49:14.618Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:14.638Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:44:36.011Z',
  nome: 'Gianni',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
2025-06-15T08:49:23.973Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Gianni',
  oldValue: 'Gianni',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:49:24.001Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Gianni',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:49:24.026Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:24.104Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:27.428Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:49:23.973Z',
  nome: 'Gianni',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Lui',
  oldValue: 'Gianni',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:49:27.457Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Lui',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:49:27.483Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:27.558Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:29.965Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:49:27.434Z',
  nome: 'Lui',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  oldValue: 'Lui',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:49:29.992Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:49:30.021Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:30.095Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:48.402Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:49:48.404Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:52.571Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Bong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:49:29.974Z',
  nome: 'Luigi',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianni',
  oldValue: 'Bong',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:49:52.597Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianni',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:49:52.623Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:49:52.706Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:50:00.722Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:50:00.723Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:50:00.729Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:50:00.744Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:50:00.747Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Gianni',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:49:52.576Z',
  nome: 'Luigi',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:50:00.756Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:50:00.768Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:50:11.280Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Giannini',
  oldValue: 'Gianni',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:50:11.311Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Giannini',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:50:11.335Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:50:11.413Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
Client WebSocket disconnesso
Client WebSocket disconnesso
Client WebSocket disconnesso
2025-06-15T08:51:18.180Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:51:18.181Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:51:18.193Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:51:18.261Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:51:18.263Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:51:18.267Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Giannini',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:50:11.281Z',
  nome: 'Luigi',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:51:18.272Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:51:22.998Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigino',
  oldValue: 'Luigi',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:51:23.042Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigino',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:51:23.067Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:51:23.144Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:51:27.606Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Giannini',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:51:22.999Z',
  nome: 'Luigino',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianninino',
  oldValue: 'Giannini',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:51:27.641Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianninino',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:51:27.666Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:51:27.742Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:51:42.508Z - GET /.well-known/appspecific/com.chrome.devtools.json
2025-06-15T08:52:02.884Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Gianninino',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:51:27.616Z',
  nome: 'Luigino',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianninino!',
  oldValue: 'Gianninino',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:52:02.943Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:52:02.946Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianninino!',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:52:02.970Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:52:03.045Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
Client WebSocket disconnesso
2025-06-15T08:52:21.361Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
2025-06-15T08:52:21.362Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
2025-06-15T08:52:21.370Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/members
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN e, r, 
                       properties(r) as relationAttributes
                ORDER BY r.addedAt DESC
                SKIP 0
                LIMIT 100
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Trovati 1 membri per modulo 00482728-3590-4d2a-8dea-af949107e980
Nuovo client WebSocket connesso
2025-06-15T08:52:21.389Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
2025-06-15T08:52:21.389Z - GET /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Gianninino!',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:52:02.898Z',
  nome: 'Luigino',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
2025-06-15T08:52:21.396Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:52:21.404Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
2025-06-15T08:52:26.888Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo cognome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianni',
  oldValue: 'Gianninino!',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:52:26.918Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'cognome',
  newValue: 'Gianni',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:52:26.943Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:52:27.018Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:52:36.397Z - PUT /api/entity/f00ea4f4-e519-4116-b985-cda83f35a2a0/attribute
🔧 Aggiornamento attributo nome per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:04:25.281Z',
  cognome: 'Gianni',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:52:26.889Z',
  nome: 'Luigino',
  id: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  telefono: '3345050930',
  email: 'alessio.hong@example.net'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  oldValue: 'Luigino',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità f00ea4f4-e519-4116-b985-cda83f35a2a0
2025-06-15T08:52:36.438Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
  attributeName: 'nome',
  newValue: 'Luigi',
  changeType: 'update',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'f00ea4f4-e519-4116-b985-cda83f35a2a0',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:52:36.460Z'
  }
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:52:36.538Z - GET /api/modules/00482728-3590-4d2a-8dea-af949107e980/aggregates
🔍 Esecuzione query: 
                MATCH (m:ModuleInstance {id: $moduleId})<-[r:MEMBER_OF]-(e:Entity)
                RETURN 
                    COUNT(DISTINCT e) as totalMembers,
                    SUM(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as totalAmount,
                    AVG(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as averageAmount,
                    MIN(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as minAmount,
                    MAX(CASE 
                        WHEN r.fee STARTS WITH '$' 
                        THEN toFloat(substring(r.fee, 1))
                        ELSE toFloat(r.fee)
                    END) as maxAmount,
                    COLLECT(DISTINCT r.ruolo) as roles
            
✅ Aggregati calcolati per modulo 00482728-3590-4d2a-8dea-af949107e980: {
  totalMembers: 1,
  totalAmount: 4500,
  averageAmount: 4500,
  minAmount: 4500,
  maxAmount: 4500,
  roles: []
}
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
⚠️ Tipo messaggio WebSocket non supportato: subscription
2025-06-15T08:52:39.236Z - GET /.well-known/appspecific/com.chrome.devtools.json
Client WebSocket disconnesso
Nuovo client WebSocket connesso
2025-06-15T08:55:29.462Z - GET /api/entities/Contact
🔍 Recupero tutte le entità di tipo: Contact
🔍 Esecuzione query: 
            MATCH (e:Entity:`Contact`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
2025-06-15T08:55:29.462Z - GET /api/schema/entity/TestEvoluzione
2025-06-15T08:55:29.463Z - GET /api/entities/TestEvoluzione
🔍 Recupero tutte le entità di tipo: TestEvoluzione
🔍 Esecuzione query: 
            MATCH (e:Entity:`TestEvoluzione`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
✅ Trovate 4 entità di tipo Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
✅ Recuperate 4 entità di tipo Contact
✅ Trovate 1 entità di tipo TestEvoluzione
✅ Recuperate 1 entità di tipo TestEvoluzione
2025-06-15T08:55:29.633Z - GET /api/entities/TestEvoluzione
🔍 Recupero tutte le entità di tipo: TestEvoluzione
🔍 Esecuzione query: 
            MATCH (e:Entity:`TestEvoluzione`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
2025-06-15T08:55:29.634Z - GET /api/schema/entity/TestEvoluzione
✅ Trovate 1 entità di tipo TestEvoluzione
✅ Recuperate 1 entità di tipo TestEvoluzione
2025-06-15T08:55:33.473Z - GET /api/entities/Contact
🔍 Recupero tutte le entità di tipo: Contact
🔍 Esecuzione query: 
            MATCH (e:Entity:`Contact`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
✅ Trovate 4 entità di tipo Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
✅ Recuperate 4 entità di tipo Contact
2025-06-15T08:55:35.096Z - GET /api/schema/entity/TestEvoluzione
2025-06-15T08:55:35.099Z - GET /api/entities/TestEvoluzione
🔍 Recupero tutte le entità di tipo: TestEvoluzione
🔍 Esecuzione query: 
            MATCH (e:Entity:`TestEvoluzione`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
✅ Trovate 1 entità di tipo TestEvoluzione
✅ Recuperate 1 entità di tipo TestEvoluzione
2025-06-15T08:55:36.842Z - GET /api/entities/Contact
🔍 Recupero tutte le entità di tipo: Contact
🔍 Esecuzione query: 
            MATCH (e:Entity:`Contact`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
✅ Trovate 4 entità di tipo Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
📝 Attributo scoperto: cognome (string) per Contact
📝 Attributo scoperto: modifiedAt (date) per Contact
📝 Attributo scoperto: indirizzo (string) per Contact
📝 Attributo scoperto: citta (string) per Contact
✅ Recuperate 4 entità di tipo Contact
Nuovo client WebSocket connesso
2025-06-15T08:55:42.980Z - GET /api/schema/entity/TestEvoluzione
2025-06-15T08:55:42.980Z - GET /api/entities/TestEvoluzione
🔍 Recupero tutte le entità di tipo: TestEvoluzione
🔍 Esecuzione query: 
            MATCH (e:Entity:`TestEvoluzione`)
            RETURN e
            ORDER BY e.createdAt
            SKIP 0
            LIMIT 1000
        
✅ Trovate 1 entità di tipo TestEvoluzione
✅ Recuperate 1 entità di tipo TestEvoluzione
2025-06-15T08:55:42.988Z - GET /api/schema/entity/TestEvoluzione
Client WebSocket disconnesso
Client WebSocket disconnesso
Nuovo client WebSocket connesso
Client WebSocket disconnesso
Nuovo client WebSocket connesso
2025-06-15T08:57:18.441Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:18.529Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T08:57:18.529Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: c9e71557-6028-49e5-9459-83b7e53221bb (tipo: Persona)
2025-06-15T08:57:18.568Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:18.529Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T08:57:18.529Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: 'c9e71557-6028-49e5-9459-83b7e53221bb',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:18.592Z'
  }
}
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:18.601Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T08:57:18.601Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '66be7197-5c22-40b2-bf78-e61cb527b8be',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 66be7197-5c22-40b2-bf78-e61cb527b8be (tipo: Persona)
2025-06-15T08:57:18.613Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '66be7197-5c22-40b2-bf78-e61cb527b8be',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '66be7197-5c22-40b2-bf78-e61cb527b8be',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:18.601Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T08:57:18.601Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '66be7197-5c22-40b2-bf78-e61cb527b8be',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '66be7197-5c22-40b2-bf78-e61cb527b8be',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:18.639Z'
  }
}
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:18.646Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T08:57:18.646Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '2f5c64c9-6c73-46b5-80d9-1715002aad15',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 2f5c64c9-6c73-46b5-80d9-1715002aad15 (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '2f5c64c9-6c73-46b5-80d9-1715002aad15',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '2f5c64c9-6c73-46b5-80d9-1715002aad15',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:18.646Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T08:57:18.646Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '2f5c64c9-6c73-46b5-80d9-1715002aad15',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 2,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '2f5c64c9-6c73-46b5-80d9-1715002aad15',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:18.710Z'
  }
}
Nuovo client WebSocket connesso
2025-06-15T08:57:25.245Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:25.301Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T08:57:25.301Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: '0dfeb166-0f9f-488a-b387-f14bbebc1c0c',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: 0dfeb166-0f9f-488a-b387-f14bbebc1c0c (tipo: Persona)
2025-06-15T08:57:25.311Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '0dfeb166-0f9f-488a-b387-f14bbebc1c0c',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '0dfeb166-0f9f-488a-b387-f14bbebc1c0c',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:25.301Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T08:57:25.301Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: '0dfeb166-0f9f-488a-b387-f14bbebc1c0c',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '0dfeb166-0f9f-488a-b387-f14bbebc1c0c',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:25.338Z'
  }
}
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:25.338Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T08:57:25.338Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: 'bb130c0d-8c56-471a-9ed4-872991b56f29',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: bb130c0d-8c56-471a-9ed4-872991b56f29 (tipo: Persona)
2025-06-15T08:57:25.346Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'bb130c0d-8c56-471a-9ed4-872991b56f29',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'bb130c0d-8c56-471a-9ed4-872991b56f29',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:25.338Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T08:57:25.338Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: 'bb130c0d-8c56-471a-9ed4-872991b56f29',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'bb130c0d-8c56-471a-9ed4-872991b56f29',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:25.373Z'
  }
}
✅ Entità creata: {
  createdAt: '2025-06-15T08:57:25.372Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T08:57:25.372Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: e6fff8ef-aecf-472a-b006-e6d42ee54923 (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:57:25.372Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T08:57:25.372Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:57:25.410Z'
  }
}
2025-06-15T08:57:32.919Z - PUT /api/entity/e6fff8ef-aecf-472a-b006-e6d42ee54923/attribute
🔧 Aggiornamento attributo telefono per entità e6fff8ef-aecf-472a-b006-e6d42ee54923
🔄 Schema aggiornato in cache per Contact
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`telefono` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo telefono aggiornato per entità e6fff8ef-aecf-472a-b006-e6d42ee54923
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  attributeName: 'telefono',
  newValue: '+1-555-3831',
  oldValue: '+1-555-0103',
  entityType: 'Contact'
}
✅ Attributo telefono aggiornato per entità e6fff8ef-aecf-472a-b006-e6d42ee54923
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  attributeName: 'telefono'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
  attributeName: 'telefono',
  newValue: '+1-555-3831',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: 'e6fff8ef-aecf-472a-b006-e6d42ee54923',
    changeType: 'update',
    attributeName: 'telefono',
    data: undefined,
    timestamp: '2025-06-15T08:57:32.988Z'
  }
}
2025-06-15T08:57:44.700Z - PUT /api/entity/c9e71557-6028-49e5-9459-83b7e53221bb/attribute
🔧 Aggiornamento attributo nome per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'nome',
  newValue: 'Alessio',
  oldValue: 'Alice',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'nome',
  newValue: 'Alessio',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:57:44.763Z'
  }
}
2025-06-15T08:57:45.838Z - PUT /api/entity/c9e71557-6028-49e5-9459-83b7e53221bb/attribute
🔧 Aggiornamento attributo cognome per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:57:18.529Z',
  cognome: 'Johnson',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:57:44.700Z',
  nome: 'Alessio',
  id: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'cognome',
  newValue: 'Hong',
  oldValue: 'Johnson',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'cognome',
  newValue: 'Hong',
  changeType: 'update',
  clients: 3,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:57:45.912Z'
  }
}
Nuovo client WebSocket connesso
Client WebSocket disconnesso
Nuovo client WebSocket connesso
2025-06-15T08:58:30.239Z - PUT /api/entity/c9e71557-6028-49e5-9459-83b7e53221bb/attribute
🔧 Aggiornamento attributo email per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:57:18.529Z',
  cognome: 'Hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:57:45.854Z',
  nome: 'Alessio',
  id: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`email` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo email aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'email',
  newValue: 'alessio@goofystudio.com',
  oldValue: 'alice.johnson@example.com',
  entityType: 'Persona'
}
✅ Attributo email aggiornato per entità c9e71557-6028-49e5-9459-83b7e53221bb
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'email'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
  attributeName: 'email',
  newValue: 'alessio@goofystudio.com',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'c9e71557-6028-49e5-9459-83b7e53221bb',
    changeType: 'update',
    attributeName: 'email',
    data: undefined,
    timestamp: '2025-06-15T08:58:30.297Z'
  }
}
2025-06-15T08:58:38.747Z - POST /api/entities
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'wiaa5' }
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.nome = string
🤖 Validazione gentile: TestEntity.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.value = string
🤖 Validazione gentile: TestEntity.value = ✅ (0 suggerimenti)
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'wiaa5' }
🔧 Creazione schema automatico per tipo TestEntity
🔧 Definizione schema entità per tipo: TestEntity
🔍 Esecuzione query: 
            MERGE (s:SchemaEntityType {entityType: $entityType})
            SET s.schemaId = $schemaId,
                s.version = $version,
                s.mode = $mode,
                s.created = $created,
                s.modified = $modified,
                s.constraints = $constraints
            RETURN s
        
💾 Salvataggio 2 attributi per schema TestEntity
🔍 Esecuzione query: MATCH (s) WHERE s.schemaId = $schemaId

                MERGE (s)-[:HAS_ATTRIBUTE]->(a0:AttributeDefinition {name: $attr0_name, schemaId: $schemaId})
                ON CREATE SET 
                    a0.type = $attr0_type,
                    a0.required = $attr0_required,
                    a0.description = $attr0_description
                MERGE (s)-[:HAS_ATTRIBUTE]->(a1:AttributeDefinition {name: $attr1_name, schemaId: $schemaId})
                ON CREATE SET 
                    a1.type = $attr1_type,
                    a1.required = $attr1_required,
                    a1.description = $attr1_description
RETURN a0, a1
✅ Batch di 2 attributi salvato per schema schema_TestEntity
✅ Schema entità salvato: {
  mode: 'flexible',
  schemaId: 'schema_TestEntity',
  created: 1749977918795,
  entityType: 'TestEntity',
  modified: '2025-06-15T08:58:38.795Z',
  version: 1,
  constraints: '[]'
}
📝 Registrato cambiamento schema: created schema entity TestEntity
✅ Schema entità definito: TestEntity
🔄 Schema aggiornato in cache per TestEntity
✅ Applicati 0 valori di default
🔍 Esecuzione query: 
            CREATE (e:Entity:`TestEntity`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`value` = $attr1
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:58:38.833Z',
  modifiedAt: '2025-06-15T08:58:38.833Z',
  entityType: 'TestEntity',
  nome: 'WebSocket Test',
  id: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  value: 'wiaa5'
}
✅ Entità creata: db8180b8-46f2-4d92-a5fb-4748d351d05d (tipo: TestEntity)
2025-06-15T08:58:38.890Z - PUT /api/entity/db8180b8-46f2-4d92-a5fb-4748d351d05d/attribute
🔧 Aggiornamento attributo value per entità db8180b8-46f2-4d92-a5fb-4748d351d05d
🔄 Schema aggiornato in cache per TestEntity
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`value` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:58:38.833Z',
    modifiedAt: '2025-06-15T08:58:38.833Z',
    entityType: 'TestEntity',
    nome: 'WebSocket Test',
    id: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
    value: 'wiaa5'
  },
  changeType: 'create',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:58:38.912Z'
  }
}
✅ Attributo value aggiornato per entità db8180b8-46f2-4d92-a5fb-4748d351d05d
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  attributeName: 'value',
  newValue: 'Updated-1749977918887',
  oldValue: 'wiaa5',
  entityType: 'TestEntity'
}
✅ Attributo value aggiornato per entità db8180b8-46f2-4d92-a5fb-4748d351d05d
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  attributeName: 'value'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
  attributeName: 'value',
  newValue: 'Updated-1749977918887',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: 'db8180b8-46f2-4d92-a5fb-4748d351d05d',
    changeType: 'update',
    attributeName: 'value',
    data: undefined,
    timestamp: '2025-06-15T08:58:38.951Z'
  }
}
Client WebSocket disconnesso
Nuovo client WebSocket connesso
Nuovo client WebSocket connesso
2025-06-15T08:59:07.372Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:07.406Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T08:59:07.406Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: 'c0df86bc-9253-4c20-9756-d1f2de03cc98',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: c0df86bc-9253-4c20-9756-d1f2de03cc98 (tipo: Persona)
2025-06-15T08:59:07.417Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c0df86bc-9253-4c20-9756-d1f2de03cc98',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'c0df86bc-9253-4c20-9756-d1f2de03cc98',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:07.406Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T08:59:07.406Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: 'c0df86bc-9253-4c20-9756-d1f2de03cc98',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'c0df86bc-9253-4c20-9756-d1f2de03cc98',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:07.448Z'
  }
}
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:07.449Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T08:59:07.449Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '1d9af00c-9ea3-4658-8ec3-303e1dda018a',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 1d9af00c-9ea3-4658-8ec3-303e1dda018a (tipo: Persona)
2025-06-15T08:59:07.458Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '1d9af00c-9ea3-4658-8ec3-303e1dda018a',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '1d9af00c-9ea3-4658-8ec3-303e1dda018a',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:07.449Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T08:59:07.449Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '1d9af00c-9ea3-4658-8ec3-303e1dda018a',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '1d9af00c-9ea3-4658-8ec3-303e1dda018a',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:07.485Z'
  }
}
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:07.494Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T08:59:07.494Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '784c9215-e74b-4d32-a156-fd4448d8f5b4',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 784c9215-e74b-4d32-a156-fd4448d8f5b4 (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '784c9215-e74b-4d32-a156-fd4448d8f5b4',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '784c9215-e74b-4d32-a156-fd4448d8f5b4',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:07.494Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T08:59:07.494Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '784c9215-e74b-4d32-a156-fd4448d8f5b4',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '784c9215-e74b-4d32-a156-fd4448d8f5b4',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:07.534Z'
  }
}
2025-06-15T08:59:17.282Z - POST /api/entities
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'nxkqcpi' }
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.nome = string
🤖 Validazione gentile: TestEntity.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.value = string
🤖 Validazione gentile: TestEntity.value = ✅ (0 suggerimenti)
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'nxkqcpi' }
🔄 Schema aggiornato in cache per TestEntity
✅ Applicati 0 valori di default
🔍 Esecuzione query: 
            CREATE (e:Entity:`TestEntity`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`value` = $attr1
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:17.320Z',
  modifiedAt: '2025-06-15T08:59:17.320Z',
  entityType: 'TestEntity',
  nome: 'WebSocket Test',
  id: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  value: 'nxkqcpi'
}
✅ Entità creata: 7a51f2f4-c642-4568-84d6-e1c9839241b1 (tipo: TestEntity)
2025-06-15T08:59:17.338Z - PUT /api/entity/7a51f2f4-c642-4568-84d6-e1c9839241b1/attribute
🔧 Aggiornamento attributo value per entità 7a51f2f4-c642-4568-84d6-e1c9839241b1
🔄 Schema aggiornato in cache per TestEntity
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`value` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo value aggiornato per entità 7a51f2f4-c642-4568-84d6-e1c9839241b1
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  attributeName: 'value',
  newValue: 'Updated-1749977957336',
  oldValue: 'nxkqcpi',
  entityType: 'TestEntity'
}
✅ Attributo value aggiornato per entità 7a51f2f4-c642-4568-84d6-e1c9839241b1
[AttributeSpace] Processando batch di 2 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:17.320Z',
    modifiedAt: '2025-06-15T08:59:17.320Z',
    entityType: 'TestEntity',
    nome: 'WebSocket Test',
    id: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
    value: 'nxkqcpi'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:17.363Z'
  }
}
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  attributeName: 'value'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
  attributeName: 'value',
  newValue: 'Updated-1749977957336',
  changeType: 'update',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '7a51f2f4-c642-4568-84d6-e1c9839241b1',
    changeType: 'update',
    attributeName: 'value',
    data: undefined,
    timestamp: '2025-06-15T08:59:17.363Z'
  }
}
2025-06-15T08:59:46.092Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:46.155Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T08:59:46.155Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: 187c1ba7-a41c-4f90-87c3-e38a6d7c6689 (tipo: Persona)
2025-06-15T08:59:46.180Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:46.155Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T08:59:46.155Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:46.204Z'
  }
}
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:46.232Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T08:59:46.232Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '5ae743ae-39cc-4069-8931-089f3ca888bb',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 5ae743ae-39cc-4069-8931-089f3ca888bb (tipo: Persona)
2025-06-15T08:59:46.249Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '5ae743ae-39cc-4069-8931-089f3ca888bb',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '5ae743ae-39cc-4069-8931-089f3ca888bb',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:46.232Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T08:59:46.232Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '5ae743ae-39cc-4069-8931-089f3ca888bb',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '5ae743ae-39cc-4069-8931-089f3ca888bb',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:46.275Z'
  }
}
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T08:59:46.298Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T08:59:46.298Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '750ef9fd-a618-4d04-8a3e-3872ffb4b6d5',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 750ef9fd-a618-4d04-8a3e-3872ffb4b6d5 (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '750ef9fd-a618-4d04-8a3e-3872ffb4b6d5',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '750ef9fd-a618-4d04-8a3e-3872ffb4b6d5',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T08:59:46.298Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T08:59:46.298Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '750ef9fd-a618-4d04-8a3e-3872ffb4b6d5',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '750ef9fd-a618-4d04-8a3e-3872ffb4b6d5',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T08:59:46.344Z'
  }
}
2025-06-15T08:59:50.933Z - PUT /api/entity/187c1ba7-a41c-4f90-87c3-e38a6d7c6689/attribute
🔧 Aggiornamento attributo nome per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'nome',
  newValue: 'alessio',
  oldValue: 'Alice',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'nome',
  newValue: 'alessio',
  changeType: 'update',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T08:59:50.981Z'
  }
}
2025-06-15T08:59:53.278Z - PUT /api/entity/187c1ba7-a41c-4f90-87c3-e38a6d7c6689/attribute
🔧 Aggiornamento attributo cognome per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T08:59:46.155Z',
  cognome: 'Johnson',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T08:59:50.933Z',
  nome: 'alessio',
  id: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'cognome',
  newValue: 'hong',
  oldValue: 'Johnson',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità 187c1ba7-a41c-4f90-87c3-e38a6d7c6689
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
  attributeName: 'cognome',
  newValue: 'hong',
  changeType: 'update',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '187c1ba7-a41c-4f90-87c3-e38a6d7c6689',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T08:59:53.333Z'
  }
}
2025-06-15T09:00:03.663Z - GET /.well-known/appspecific/com.chrome.devtools.json
Client WebSocket disconnesso
Nuovo client WebSocket connesso
2025-06-15T09:02:03.875Z - GET /api/entities
2025-06-15T09:02:03.881Z - GET /api/entities
2025-06-15T09:02:03.890Z - GET /api/entities
2025-06-15T09:02:06.054Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:06.123Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T09:02:06.123Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d (tipo: Persona)
2025-06-15T09:02:06.137Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:06.123Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T09:02:06.123Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:06.162Z'
  }
}
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:06.178Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T09:02:06.178Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '9a57af41-135a-45d5-8b3a-634860a2a082',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 9a57af41-135a-45d5-8b3a-634860a2a082 (tipo: Persona)
2025-06-15T09:02:06.192Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '9a57af41-135a-45d5-8b3a-634860a2a082',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '9a57af41-135a-45d5-8b3a-634860a2a082',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:06.178Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T09:02:06.178Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '9a57af41-135a-45d5-8b3a-634860a2a082',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '9a57af41-135a-45d5-8b3a-634860a2a082',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:06.219Z'
  }
}
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:06.230Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T09:02:06.230Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '7af8164b-75e8-468c-9d95-28aa369f7efe',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 7af8164b-75e8-468c-9d95-28aa369f7efe (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '7af8164b-75e8-468c-9d95-28aa369f7efe',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '7af8164b-75e8-468c-9d95-28aa369f7efe',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:06.230Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T09:02:06.230Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '7af8164b-75e8-468c-9d95-28aa369f7efe',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '7af8164b-75e8-468c-9d95-28aa369f7efe',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:06.270Z'
  }
}
2025-06-15T09:02:10.032Z - PUT /api/entity/fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d/attribute
🔧 Aggiornamento attributo nome per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`nome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo nome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'nome',
  newValue: 'alessio hong',
  oldValue: 'Alice',
  entityType: 'Persona'
}
✅ Attributo nome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'nome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'nome',
  newValue: 'alessio hong',
  changeType: 'update',
  clients: 5,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
    changeType: 'update',
    attributeName: 'nome',
    data: undefined,
    timestamp: '2025-06-15T09:02:10.078Z'
  }
}
2025-06-15T09:02:12.774Z - GET /api/entities
Nuovo client WebSocket connesso
2025-06-15T09:02:12.777Z - GET /api/entities
2025-06-15T09:02:12.784Z - GET /api/entities
2025-06-15T09:02:14.090Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.147Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T09:02:14.147Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: 'b9faaa1b-1f18-4c64-ac80-517af0d9f342',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: b9faaa1b-1f18-4c64-ac80-517af0d9f342 (tipo: Persona)
2025-06-15T09:02:14.185Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'b9faaa1b-1f18-4c64-ac80-517af0d9f342',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'b9faaa1b-1f18-4c64-ac80-517af0d9f342',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.147Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T09:02:14.147Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: 'b9faaa1b-1f18-4c64-ac80-517af0d9f342',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'b9faaa1b-1f18-4c64-ac80-517af0d9f342',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.208Z'
  }
}
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.235Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T09:02:14.235Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '45507866-a6e2-4dfe-ba31-50ec685bafb3',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 45507866-a6e2-4dfe-ba31-50ec685bafb3 (tipo: Persona)
2025-06-15T09:02:14.252Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '45507866-a6e2-4dfe-ba31-50ec685bafb3',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '45507866-a6e2-4dfe-ba31-50ec685bafb3',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.235Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T09:02:14.235Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '45507866-a6e2-4dfe-ba31-50ec685bafb3',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '45507866-a6e2-4dfe-ba31-50ec685bafb3',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.279Z'
  }
}
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.303Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T09:02:14.303Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8 (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.303Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T09:02:14.303Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '9f8ef0c5-b1c4-469c-a491-7617b2cd7cb8',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.346Z'
  }
}
2025-06-15T09:02:14.685Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Alice',
  cognome: 'Johnson',
  email: 'alice.johnson@example.com',
  telefono: '+1-555-0101'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.743Z',
  cognome: 'Johnson',
  modifiedAt: '2025-06-15T09:02:14.743Z',
  entityType: 'Persona',
  nome: 'Alice',
  id: '0e55f40f-cc92-4c4f-998a-5a0c3feda444',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
✅ Entità creata: 0e55f40f-cc92-4c4f-998a-5a0c3feda444 (tipo: Persona)
2025-06-15T09:02:14.766Z - POST /api/entities
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.nome = string
🤖 Validazione gentile: Persona.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '0e55f40f-cc92-4c4f-998a-5a0c3feda444',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '0e55f40f-cc92-4c4f-998a-5a0c3feda444',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.743Z',
    cognome: 'Johnson',
    modifiedAt: '2025-06-15T09:02:14.743Z',
    entityType: 'Persona',
    nome: 'Alice',
    id: '0e55f40f-cc92-4c4f-998a-5a0c3feda444',
    telefono: '+1-555-0101',
    email: 'alice.johnson@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '0e55f40f-cc92-4c4f-998a-5a0c3feda444',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.787Z'
  }
}
🌱 Appreso attributo: Persona.cognome = string
🤖 Validazione gentile: Persona.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.email = email
🤖 Validazione gentile: Persona.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Persona.telefono = phone
🤖 Validazione gentile: Persona.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Persona {
  nome: 'Bob',
  cognome: 'Smith',
  email: 'bob.smith@example.com',
  telefono: '+1-555-0102'
}
🔄 Schema aggiornato in cache per Persona
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile), telefono: Attributo telefono non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Persona`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.807Z',
  cognome: 'Smith',
  modifiedAt: '2025-06-15T09:02:14.807Z',
  entityType: 'Persona',
  nome: 'Bob',
  id: '948d51fb-8f8b-4215-a022-befe44905910',
  telefono: '+1-555-0102',
  email: 'bob.smith@example.com'
}
✅ Entità creata: 948d51fb-8f8b-4215-a022-befe44905910 (tipo: Persona)
2025-06-15T09:02:14.818Z - POST /api/entities
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.nome = string
🤖 Validazione gentile: Contact.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.cognome = string
🤖 Validazione gentile: Contact.cognome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '948d51fb-8f8b-4215-a022-befe44905910',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: '948d51fb-8f8b-4215-a022-befe44905910',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.807Z',
    cognome: 'Smith',
    modifiedAt: '2025-06-15T09:02:14.807Z',
    entityType: 'Persona',
    nome: 'Bob',
    id: '948d51fb-8f8b-4215-a022-befe44905910',
    telefono: '+1-555-0102',
    email: 'bob.smith@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: '948d51fb-8f8b-4215-a022-befe44905910',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.852Z'
  }
}
🌱 Appreso attributo: Contact.email = email
🤖 Validazione gentile: Contact.email = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: Contact.telefono = phone
🤖 Validazione gentile: Contact.telefono = ✅ (0 suggerimenti)
🔧 Creazione entità tipo Contact {
  nome: 'Charlie',
  cognome: 'Brown',
  email: 'charlie.brown@example.com',
  telefono: '+1-555-0103'
}
🔄 Schema aggiornato in cache per Contact
✅ Applicati 0 valori di default
⚠️ Avvertimenti validazione: cognome: Attributo cognome non definito nello schema (modalità flessibile)
🔍 Esecuzione query: 
            CREATE (e:Entity:`Contact`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`cognome` = $attr1, e.`email` = $attr2, e.`telefono` = $attr3
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:02:14.865Z',
  cognome: 'Brown',
  modifiedAt: '2025-06-15T09:02:14.865Z',
  entityType: 'Contact',
  nome: 'Charlie',
  id: '0b68d9c9-73f5-40b5-859d-98df6269074b',
  telefono: '+1-555-0103',
  email: 'charlie.brown@example.com'
}
✅ Entità creata: 0b68d9c9-73f5-40b5-859d-98df6269074b (tipo: Contact)
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '0b68d9c9-73f5-40b5-859d-98df6269074b',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Contact',
  entityId: '0b68d9c9-73f5-40b5-859d-98df6269074b',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:02:14.865Z',
    cognome: 'Brown',
    modifiedAt: '2025-06-15T09:02:14.865Z',
    entityType: 'Contact',
    nome: 'Charlie',
    id: '0b68d9c9-73f5-40b5-859d-98df6269074b',
    telefono: '+1-555-0103',
    email: 'charlie.brown@example.com'
  },
  changeType: 'create',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Contact',
    entityId: '0b68d9c9-73f5-40b5-859d-98df6269074b',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:02:14.907Z'
  }
}
2025-06-15T09:02:21.324Z - PUT /api/entity/fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d/attribute
🔧 Aggiornamento attributo cognome per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T09:02:06.123Z',
  cognome: 'Johnson',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T09:02:10.033Z',
  nome: 'alessio hong',
  id: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome',
  newValue: 'hong',
  oldValue: 'Johnson',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome',
  newValue: 'hong',
  changeType: 'update',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T09:02:21.384Z'
  }
}
2025-06-15T09:02:29.724Z - PUT /api/entity/fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d/attribute
🔧 Aggiornamento attributo cognome per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $id})
            RETURN e
        
✅ Entità trovata: {
  createdAt: '2025-06-15T09:02:06.123Z',
  cognome: 'hong',
  entityType: 'Persona',
  modifiedAt: '2025-06-15T09:02:21.331Z',
  nome: 'alessio hong',
  id: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  telefono: '+1-555-0101',
  email: 'alice.johnson@example.com'
}
🔄 Schema aggiornato in cache per Persona
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`cognome` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo cognome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome',
  newValue: 'test',
  oldValue: 'hong',
  entityType: 'Persona'
}
✅ Attributo cognome aggiornato per entità fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d
[AttributeSpace] Processando batch di 1 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'Persona',
  entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
  attributeName: 'cognome',
  newValue: 'test',
  changeType: 'update',
  clients: 6,
  message: {
    type: 'change',
    entityType: 'Persona',
    entityId: 'fd8aaf2f-0b06-42dd-b9da-0e90ffc80a1d',
    changeType: 'update',
    attributeName: 'cognome',
    data: undefined,
    timestamp: '2025-06-15T09:02:29.782Z'
  }
}
Client WebSocket disconnesso
2025-06-15T09:02:29.836Z - GET /api/entities
Nuovo client WebSocket connesso
2025-06-15T09:02:29.838Z - GET /api/entities
2025-06-15T09:02:29.844Z - GET /api/entities
Client WebSocket disconnesso
Client WebSocket disconnesso
2025-06-15T09:02:51.921Z - GET /.well-known/appspecific/com.chrome.devtools.json
Client WebSocket disconnesso
Client WebSocket disconnesso
Nuovo client WebSocket connesso
Nuovo client WebSocket connesso
2025-06-15T09:04:39.819Z - POST /api/entities
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'yaadpc' }
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.nome = string
🤖 Validazione gentile: TestEntity.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.value = string
🤖 Validazione gentile: TestEntity.value = ✅ (0 suggerimenti)
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'yaadpc' }
🔄 Schema aggiornato in cache per TestEntity
✅ Applicati 0 valori di default
🔍 Esecuzione query: 
            CREATE (e:Entity:`TestEntity`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`value` = $attr1
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:04:39.866Z',
  modifiedAt: '2025-06-15T09:04:39.866Z',
  entityType: 'TestEntity',
  nome: 'WebSocket Test',
  id: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  value: 'yaadpc'
}
✅ Entità creata: 94ffa29e-84a7-4114-be5e-b92161b2039c (tipo: TestEntity)
2025-06-15T09:04:39.888Z - PUT /api/entity/94ffa29e-84a7-4114-be5e-b92161b2039c/attribute
🔧 Aggiornamento attributo value per entità 94ffa29e-84a7-4114-be5e-b92161b2039c
🔄 Schema aggiornato in cache per TestEntity
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`value` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo value aggiornato per entità 94ffa29e-84a7-4114-be5e-b92161b2039c
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  attributeName: 'value',
  newValue: 'Updated-1749978279885',
  oldValue: 'yaadpc',
  entityType: 'TestEntity'
}
✅ Attributo value aggiornato per entità 94ffa29e-84a7-4114-be5e-b92161b2039c
[AttributeSpace] Processando batch di 2 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:04:39.866Z',
    modifiedAt: '2025-06-15T09:04:39.866Z',
    entityType: 'TestEntity',
    nome: 'WebSocket Test',
    id: '94ffa29e-84a7-4114-be5e-b92161b2039c',
    value: 'yaadpc'
  },
  changeType: 'create',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:04:39.912Z'
  }
}
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  attributeName: 'value'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
  attributeName: 'value',
  newValue: 'Updated-1749978279885',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '94ffa29e-84a7-4114-be5e-b92161b2039c',
    changeType: 'update',
    attributeName: 'value',
    data: undefined,
    timestamp: '2025-06-15T09:04:39.912Z'
  }
}
2025-06-15T09:04:45.279Z - POST /api/entities
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: '97zw2j' }
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.nome = string
🤖 Validazione gentile: TestEntity.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.value = string
🤖 Validazione gentile: TestEntity.value = ✅ (0 suggerimenti)
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: '97zw2j' }
🔄 Schema aggiornato in cache per TestEntity
✅ Applicati 0 valori di default
🔍 Esecuzione query: 
            CREATE (e:Entity:`TestEntity`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`value` = $attr1
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:04:45.316Z',
  modifiedAt: '2025-06-15T09:04:45.316Z',
  entityType: 'TestEntity',
  nome: 'WebSocket Test',
  id: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  value: '97zw2j'
}
✅ Entità creata: c33bc1f6-a08e-4763-b7ec-c95017ffb80b (tipo: TestEntity)
2025-06-15T09:04:45.338Z - PUT /api/entity/c33bc1f6-a08e-4763-b7ec-c95017ffb80b/attribute
🔧 Aggiornamento attributo value per entità c33bc1f6-a08e-4763-b7ec-c95017ffb80b
🔄 Schema aggiornato in cache per TestEntity
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`value` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo value aggiornato per entità c33bc1f6-a08e-4763-b7ec-c95017ffb80b
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  attributeName: 'value',
  newValue: 'Updated-1749978285335',
  oldValue: '97zw2j',
  entityType: 'TestEntity'
}
✅ Attributo value aggiornato per entità c33bc1f6-a08e-4763-b7ec-c95017ffb80b
[AttributeSpace] Processando batch di 2 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:04:45.316Z',
    modifiedAt: '2025-06-15T09:04:45.316Z',
    entityType: 'TestEntity',
    nome: 'WebSocket Test',
    id: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
    value: '97zw2j'
  },
  changeType: 'create',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:04:45.360Z'
  }
}
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  attributeName: 'value'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
  attributeName: 'value',
  newValue: 'Updated-1749978285335',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: 'c33bc1f6-a08e-4763-b7ec-c95017ffb80b',
    changeType: 'update',
    attributeName: 'value',
    data: undefined,
    timestamp: '2025-06-15T09:04:45.361Z'
  }
}
2025-06-15T09:04:45.741Z - POST /api/entities
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'rdc5lf' }
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.nome = string
🤖 Validazione gentile: TestEntity.nome = ✅ (0 suggerimenti)
🔍 Esecuzione query: 
                MERGE (p:AttributePattern {entityType: $entityType, attributeName: $attributeName})
                SET p += $pattern, p.updated = timestamp()
                RETURN p
            
🌱 Appreso attributo: TestEntity.value = string
🤖 Validazione gentile: TestEntity.value = ✅ (1 suggerimenti)
🔧 Creazione entità tipo TestEntity { nome: 'WebSocket Test', value: 'rdc5lf' }
🔄 Schema aggiornato in cache per TestEntity
✅ Applicati 0 valori di default
🔍 Esecuzione query: 
            CREATE (e:Entity:`TestEntity`)
            SET e.id = $id, e.entityType = $entityType, e.createdAt = $createdAt, e.modifiedAt = $modifiedAt, e.`nome` = $attr0, e.`value` = $attr1
            RETURN e
        
✅ Entità creata: {
  createdAt: '2025-06-15T09:04:45.781Z',
  modifiedAt: '2025-06-15T09:04:45.781Z',
  entityType: 'TestEntity',
  nome: 'WebSocket Test',
  id: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  value: 'rdc5lf'
}
✅ Entità creata: 34e638ae-b539-4832-a861-9bf8f0b2add6 (tipo: TestEntity)
2025-06-15T09:04:45.805Z - PUT /api/entity/34e638ae-b539-4832-a861-9bf8f0b2add6/attribute
🔧 Aggiornamento attributo value per entità 34e638ae-b539-4832-a861-9bf8f0b2add6
🔄 Schema aggiornato in cache per TestEntity
🔍 Esecuzione query: 
            MATCH (e:Entity {id: $entityId})
            SET e.`value` = $value, e.modifiedAt = $modifiedAt
            RETURN e
        
✅ Attributo value aggiornato per entità 34e638ae-b539-4832-a861-9bf8f0b2add6
🔔🔔🔔 NOTIFYING ATTRIBUTESPACE: {
  entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  attributeName: 'value',
  newValue: 'Updated-1749978285803',
  oldValue: 'rdc5lf',
  entityType: 'TestEntity'
}
✅ Attributo value aggiornato per entità 34e638ae-b539-4832-a861-9bf8f0b2add6
[AttributeSpace] Processando batch di 2 notifiche
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  attributeName: undefined
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  attributeName: undefined,
  newValue: {
    createdAt: '2025-06-15T09:04:45.781Z',
    modifiedAt: '2025-06-15T09:04:45.781Z',
    entityType: 'TestEntity',
    nome: 'WebSocket Test',
    id: '34e638ae-b539-4832-a861-9bf8f0b2add6',
    value: 'rdc5lf'
  },
  changeType: 'create',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
    changeType: 'create',
    attributeName: undefined,
    data: undefined,
    timestamp: '2025-06-15T09:04:45.826Z'
  }
}
[AttributeSpace] Trovate 1 sottoscrizioni corrispondenti per: {
  type: 'entity',
  entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  attributeName: 'value'
}
🔄🔄🔄 WEBSOCKET BROADCASTING: {
  entityType: 'TestEntity',
  entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
  attributeName: 'value',
  newValue: 'Updated-1749978285803',
  changeType: 'update',
  clients: 4,
  message: {
    type: 'change',
    entityType: 'TestEntity',
    entityId: '34e638ae-b539-4832-a861-9bf8f0b2add6',
    changeType: 'update',
    attributeName: 'value',
    data: undefined,
    timestamp: '2025-06-15T09:04:45.827Z'
  }
}
Client WebSocket disconnesso
Nuovo client WebSocket connesso
Nuovo client WebSocket connesso
Client WebSocket disconnesso
Nuovo client WebSocket connesso
Client WebSocket disconnesso

🛑 Ricevuto SIGTERM, arresto del server...
Client WebSocket disconnesso
Client WebSocket disconnesso
Client WebSocket disconnesso
🛑 Server HTTP arrestato
🔌 Disconnessione da Neo4j...
Chiusura connessione a Neo4j...
Client WebSocket disconnesso
🧹 Neo4j memory cleanup completato
✅ Connessione a Neo4j chiusa
✅ Server completamente arrestato
